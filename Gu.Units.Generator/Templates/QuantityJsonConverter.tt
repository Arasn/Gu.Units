<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ parameter name="QuantityName" type="System.String" #>
<#@ output extension=".txt" #>
<#
var settings = Settings.Instance;
// Template used by QuantityGenerator.tt
var quantity = settings.GetQuantityByName(this.QuantityName ?? settings.Quantities[0].Name);
#>
namespace Gu.Units.Json
{
    using System;
    using Newtonsoft.Json;

	/// <summary>
    /// <see cref="Newtonsoft.Json.JsonConverter" /> for the quantity <see cref="<#= Settings.Namespace #>.<#= quantity.Name #>"/>.
    /// </summary>
    [Serializable]
	public class <#= quantity.Name #>JsonConverter : JsonConverter
	{
        public static readonly <#= quantity.Name #>JsonConverter Default = new <#= quantity.Name #>JsonConverter(<#= quantity.UnitName #>.<#= quantity.Unit.Name #>);
        public static readonly <#= quantity.Name #>JsonConverter <#= quantity.Unit.Name #> = new <#= quantity.Name #>JsonConverter(<#= quantity.UnitName #>.<#= quantity.Unit.Name #>);
<#
		foreach(var unit in quantity.Unit.AllConversions)
		{
		#>
        public static readonly <#= quantity.Name #>JsonConverter <#= unit.Name #> = new <#= quantity.Name #>JsonConverter(<#= quantity.UnitName #>.<#= unit.Name #>);
<#
		} 
		#>

        private readonly <#= quantity.UnitName #> unit;

        private <#= quantity.Name #>JsonConverter(<#= quantity.UnitName #> unit)
        {
            this.unit = unit;
        }

        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            var <#= quantity.ParameterName #> = (<#= quantity.Name #>)value;
            serializer.Serialize(writer, <#= quantity.ParameterName #>.ToString(this.unit, serializer.Culture));
        }

        public override bool CanConvert(Type objectType)
        {
            return objectType == typeof(<#= quantity.Name #>);
        }

        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            var stringValue = reader.Value as string;
            return <#= quantity.Name #>.Parse(stringValue, serializer.Culture);
        }
    }
}