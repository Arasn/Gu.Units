<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ include file="$(SolutionDir)Packages\T4.TemplateFileManager\tools\ttinc\TemplateFilemanager.CS.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)Generator\Gu.Units.Generator.exe" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ output extension=".txt" #>
<# 
// after save Generator.tt, the output will be generated in the TestFolder of the project
// var fileProperties = new FileProperties()
// {
// 	BuildAction = BuildAction.EmbeddedResource
// };

var fileManager = TemplateFileManager.Create(this);
fileManager.IsAutoIndentEnabled = true;
fileManager.CanOverwriteExistingFile = true;

// init handling for parameter templates
var paramTmpl = ParamTextTemplate.Create(this.Host);
var session = ParamTextTemplate.GetSessionObject();
var settings = Settings.Instance;
this.Write(string.Format("Read Settings found {0} units", settings.SiUnits.Count));

foreach (var unit in settings.SiUnits.Concat<IUnit>(settings.DerivedUnits))
{
	session["UnitMetaData"] = unit;

	fileManager.StartNewFile(unit.UnitName + "TypeConverter.generated." + Settings.Extension, Settings.ProjectName, Settings.FolderName, null);
	var output = paramTmpl.TransformText("UnitTypeConverter.tt", session);
	this.Write(output);
    //this.WriteLine();
}

//session["UnitMetaData"] = null;
fileManager.Process();
#>
