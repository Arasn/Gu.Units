<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ include once="true" file="TemplateFilemanager.CS.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ output extension=".txt" #>
<# 

var fileManager = TemplateFileManager.Create(this);
fileManager.IsAutoIndentEnabled = true;
fileManager.CanOverwriteExistingFile = true;

// init handling for parameter templates
var paramTmpl = ParamTextTemplate.Create(this.Host, "UnitTypeConverter.tt");
var session = ParamTextTemplate.GetSessionObject();
var settings = Settings.Instance;
this.WriteLine(string.Format("Read Settings found {0} units", settings.SiUnits.Count));

foreach (var unit in settings.SiUnits.Concat<IUnit>(settings.DerivedUnits))
{
	session["UnitTypeConverterData"] = unit;

    var fileName = unit.UnitName + "TypeConverter.generated." + Settings.Extension;
    fileManager.StartNewFile(fileName, Settings.ProjectName, Settings.FolderName, null);
	var output = paramTmpl.TransformText(session);
    if (output == "ErrorGeneratingOutput")
    {
		this.WriteLine("Error transforming {0}", unit.UnitName);
        throw new InvalidOperationException("output");
    }

	this.Write(output);
}

//session["UnitMetaData"] = null;
fileManager.Process();
#>
