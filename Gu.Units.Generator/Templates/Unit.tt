<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ parameter name="UnitName" type="System.String" #>
<#@ output extension=".txt" #>
<#
// Template used by UnitGenerator.tt
var settings = Settings.Instance;
var unit = settings.GetUnitByName(UnitName ?? settings.AllUnits[0].Name);
#>
namespace <#= Settings.Namespace #>
{
    using System;
    using System.ComponentModel;

    /// <summary>
    /// A type for the unit <see cref="<#= Settings.Namespace #>.<#= unit.QuantityName #>"/>.
	/// Contains logic for conversion and formatting.
    /// </summary>
    [Serializable]
	[TypeConverter(typeof(<#= unit.ClassName #>TypeConverter))]
    public struct <#= unit.ClassName #> : IUnit, IUnit<<#= unit.QuantityName #>>, IEquatable<<#= unit.ClassName #>>
    {
        /// <summary>
        /// The <#= unit.ClassName #> unit
        /// Contains logic for conversion and formatting.
        /// </summary>
        public static readonly <#= unit.ClassName #> <#= unit.Name #> = new <#= unit.ClassName #>(<#= unit.ParameterName #> => <#= unit.ParameterName #>, <#= unit.ParameterName #> => <#= unit.ParameterName #>, "<#= unit.Symbol #>");
<#
		foreach(var su in unit.AllConversions)
        {
		#>

        /// <summary>
        /// The <#= su.Name #> unit
        /// Contains conversion logic to from and formatting.
        /// </summary>
        public static readonly <#= unit.ClassName #> <#= su.Name #> = new <#= unit.ClassName #>(<#= su.ParameterName #> => <#= su.ToSi #>, <#= unit.ParameterName #> => <#= su.FromSi #>, "<#= su.Symbol #>");
<#
        }
        #>

		private readonly Func<double, double> to<#= unit.Name #>;
		private readonly Func<double, double> from<#= unit.Name #>;
        internal readonly string symbol;

        public <#= unit.ClassName #>(Func<double, double> to<#= unit.Name #>, Func<double, double> from<#= unit.Name #>, string symbol)
        {
			this.to<#= unit.Name #> = to<#= unit.Name #>;
            this.from<#= unit.Name #> = from<#= unit.Name #>;
            this.symbol = symbol;
        }

		/// <summary>
        /// The symbol for the <see cref="<#= Settings.Namespace #>.<#= unit.ClassName #>"/>.
        /// </summary>
        public string Symbol => this.symbol;

		/// <summary>
        /// The default unit for <see cref="<#= Settings.Namespace #>.<#= unit.ClassName #>"/>
        /// </summary>
        public <#= unit.ClassName #> SiUnit => <#= unit.Name #>;

		/// <summary>
        /// The default <see cref="<#= Settings.Namespace #>.IUnit"/> for <see cref="<#= Settings.Namespace #>.<#= unit.ClassName #>"/>
        /// </summary>
        IUnit IUnit.SiUnit => <#= unit.Name #>;

        public static <#= unit.QuantityName #> operator *(double left, <#= unit.ClassName #> right)
        {
            return <#= unit.QuantityName #>.From(left, right);
        }

	    public static bool operator ==(<#= unit.ClassName #> left, <#= unit.ClassName #> right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(<#= unit.ClassName #> left, <#= unit.ClassName #> right)
        {
            return !left.Equals(right);
        }

		/// <summary>
        /// Constructs a <see cref="<#= unit.ClassName #>"/> from a string.
        /// Leading and trailing whitespace characters are allowed.
        /// </summary>
        /// <param name="text"></param>
        /// <returns>An instance of <see cref="<#= unit.ClassName #>"/></returns>
        public static <#= unit.ClassName #> Parse(string text)
        {
            return UnitParser<<#= unit.ClassName #>>.Parse(text);
        }

        public static bool TryParse(string text, out <#= unit.ClassName #> value)
        {
            return UnitParser<<#= unit.ClassName #>>.TryParse(text, out value);
        }

        /// <summary>
        /// Converts <paramref name="value"/> to <#= unit.Name #>.
        /// </summary>
        /// <param name="value"></param>
        /// <returns>The converted value</returns>
        public double <#= Gu.Units.Generator.Names.ToSiUnit #>(double value)
        {
			return this.to<#= unit.Name #>(value);
        }

        /// <summary>
        /// Converts a value from <#= unit.ParameterName #>.
        /// </summary>
        /// <param name="<#= unit.ParameterName #>">The value in <#= unit.Name #></param>
        /// <returns>The converted value</returns>
        public double <#= Gu.Units.Generator.Names.FromSiUnit #>(double <#= unit.ParameterName #>)
        {
			return this.from<#= unit.Name #>(<#= unit.ParameterName #>);
        }

        /// <summary>
        /// Creates a quantity with this unit
        /// </summary>
        /// <param name="value">The scalar value"</param>
        /// <returns>new <#= unit.QuantityName #>(<paramref name="value"/>, this)</returns>
        public <#= unit.QuantityName #> CreateQuantity(double value)
        {
            return new <#= unit.QuantityName #>(value, this);
        }

		/// <summary>
        /// Gets the scalar value of <paramref name="quantity"/> in <#= unit.Name #>
        /// </summary>
        /// <param name="quantity"></param>
        /// <returns></returns>
        public double GetScalarValue(<#= unit.QuantityName #> quantity)
        {
            return FromSiUnit(quantity.<#= unit.ParameterName #>);
        }

        public override string ToString()
        {
            return this.symbol;
        }
		
        public string ToString(string format)
        {
            <#= unit.ClassName #> unit;
            var paddedFormat = UnitFormatCache<<#= unit.ClassName #>>.GetOrCreate(format, out unit);
            if (unit != this)
            {
                return format;
            }

            using (var builder = StringBuilderPool.Borrow())
            {
                builder.Append(paddedFormat.PrePadding);
                builder.Append(paddedFormat.Format);
                builder.Append(paddedFormat.PostPadding);
                return builder.ToString();
            }
        }

        public string ToString(SymbolFormat format)
        {
            var paddedFormat = UnitFormatCache<<#= unit.ClassName #>>.GetOrCreate(this, format);
            using (var builder = StringBuilderPool.Borrow())
            {
                builder.Append(paddedFormat.PrePadding);
                builder.Append(paddedFormat.Format);
                builder.Append(paddedFormat.PostPadding);
                return builder.ToString();
            }
        }

		public bool Equals(<#= unit.ClassName #> other)
        {
            return this.symbol == other.symbol;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            return obj is <#= unit.ClassName #> && Equals((<#= unit.ClassName #>) obj);
        }

		/// <summary>
        /// Returns the hashcode for this <see cref="LengthUnit"/>
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            if (this.symbol == null)
            {
                return 0; // Needed due to default ctor
            }

            return this.symbol.GetHashCode();
        }
    }
}