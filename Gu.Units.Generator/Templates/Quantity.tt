<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ parameter name="QuantityData" type="Gu.Units.Generator.Quantity" #>
<#@ output extension=".txt" #>
<#
// Template used by QuantityGenerator.tt
Quantity quantity = null;
if(QuantityData != null)
{
    quantity = QuantityData;
}
else
{
    var unit = new SiUnit("Metres", "m")
                    {
                        QuantityName = "Length"
                    };
    unit.Conversions.Add(new Conversion("Centimetres", "cm"));
    unit.Conversions.Add(new Conversion("Millimetres", "mm"));
    quantity = unit.Quantity;
}
#>
namespace <#= Settings.Namespace #>
{
    using System;
    using System.Globalization;
    using System.Xml;
    using System.Xml.Schema;

	/// <summary>
    /// A type for the quantity <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
    /// </summary>
	// [TypeConverter(typeof(<#= quantity.ClassName #>TypeConverter))]
    [Serializable]
	public partial struct <#= quantity.ClassName #> : IQuantity<<#= quantity.ClassName #>Unit>, IComparable<<#= quantity.ClassName #>>, IEquatable<<#= quantity.ClassName #>>
	{
		public static readonly <#= quantity.ClassName #> Zero = new <#= quantity.ClassName #>();
	    
		/// <summary>
        /// The quantity in <see cref="<#= Settings.Namespace #>.<#= quantity.Unit.UnitName #>.<#= quantity.Unit.ClassName #>"/>.
        /// </summary>
		internal readonly double <#= quantity.Unit.ParameterName #>;
		
		private <#= quantity.ClassName #>(double <#= quantity.Unit.ParameterName #>)
        {
            this.<#= quantity.Unit.ParameterName #> = <#= quantity.Unit.ParameterName #>;
        }

		/// <summary>
        /// Initializes a new instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"><see cref="<#= Settings.Namespace #>.<#= quantity.Unit.UnitName #>"/>.</param>
        public <#= quantity.ClassName #>(double value, <#= quantity.ClassName #>Unit unit)
        {
            this.<#= quantity.Unit.ParameterName #> = unit.<#= Names.ToSiUnit #>(value);
        }

        /// <summary>
        /// The quantity in <see cref="<#= Settings.Namespace #>.<#= quantity.Unit.UnitName #>.<#= quantity.Unit.ClassName #>"/>
        /// </summary>
        public double <#= Names.SiValue #>
        {
            get
            {
                return this.<#= quantity.Unit.ParameterName #>;
            }
        }

		/// <summary>
        /// The <see cref="<#= Settings.Namespace #>.<#= quantity.Unit.UnitName #>"/> for the <see cref="SiValue"/>
        /// </summary>
        public <#= quantity.Unit.UnitName #> SiUnit => <#= quantity.Unit.UnitName #>.<#= quantity.Unit.ClassName #>;

		/// <summary>
        /// The <see cref="<#= Settings.Namespace #>.IUnit"/> for the <see cref="SiValue"/>
        /// </summary>
        IUnit IQuantity.SiUnit => <#= quantity.Unit.UnitName #>.<#= quantity.Unit.ClassName #>;

	    /// <summary>
        /// The quantity in <#= quantity.Unit.ParameterName #>".
        /// </summary>
		public double <#= quantity.Unit.ClassName #>
        {
            get
            {
                return this.<#= quantity.Unit.ParameterName #>;
            }
        }

<#
		foreach(var unit in quantity.Unit.Conversions)
		{
		#>
        /// <summary>
        /// The quantity in <#= unit.ParameterName #>
        /// </summary>
        public double <#= unit.ClassName #>
        {
            get
            {
                return <#= quantity.ClassName #>Unit.<#= unit.ClassName #>.<#= Names.FromSiUnit #>(this.<#= quantity.Unit.ParameterName #>);
            }
        }

<#
		} 
		#>
        /// <summary>
        /// Creates an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> from its string representation
        /// </summary>
        /// <param name="s">The string representation of the <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        /// <returns></returns>
		public static <#= quantity.ClassName #> Parse(string s)
        {
            return QuantityParser.Parse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, NumberStyles.Float, CultureInfo.CurrentCulture);
        }

		public static <#= quantity.ClassName #> Parse(string s, IFormatProvider provider)
        {
            return QuantityParser.Parse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, NumberStyles.Float, provider);
        }

        public static <#= quantity.ClassName #> Parse(string s, NumberStyles styles)
        {
            return QuantityParser.Parse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, styles, CultureInfo.CurrentCulture);
        }

        public static <#= quantity.ClassName #> Parse(string s, NumberStyles styles, IFormatProvider provider)
        {
            return QuantityParser.Parse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, styles, provider);
        }

        public static bool TryParse(string s, out <#= quantity.ClassName #> value)
        {
            return QuantityParser.TryParse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, NumberStyles.Float, CultureInfo.CurrentCulture, out value);
        }
		
        public static bool TryParse(string s, IFormatProvider provider, out <#= quantity.ClassName #> value)
        {
            return QuantityParser.TryParse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, NumberStyles.Float, provider, out value);
        }

        public static bool TryParse(string s, NumberStyles styles, out <#= quantity.ClassName #> value)
        {
            return QuantityParser.TryParse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, styles, CultureInfo.CurrentCulture, out value);
        }

        public static bool TryParse(string s, NumberStyles styles, IFormatProvider provider, out <#= quantity.ClassName #> value)
        {
            return QuantityParser.TryParse<<#= quantity.ClassName #>Unit, <#= quantity.ClassName #>>(s, From, styles, provider, out value);
        }
 
        /// <summary>
        /// Reads an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> from the <paramref name="reader"/>
        /// </summary>
        /// <param name="reader"></param>
        /// <returns>An instance of  <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></returns>
        public static <#= quantity.ClassName #> ReadFrom(XmlReader reader)
        {
            var v = new <#= quantity.ClassName #>();
            v.ReadXml(reader);
            return v;
        }
 
        /// <summary>
        /// Creates a new instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="unit"></param>
        public static <#= quantity.ClassName #> From(double value, <#= quantity.ClassName #>Unit unit)
        {
            return new <#= quantity.ClassName #>(unit.<#= Names.ToSiUnit #>(value));
        }

        /// <summary>
        /// Creates a new instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <param name="<#= quantity.Unit.ParameterName #>">The value in <see cref="<#= Settings.Namespace #>.<#= quantity.Unit.UnitName #>.<#= quantity.Unit.ClassName #>"/></param>
        public static <#= quantity.ClassName #> From<#= quantity.Unit.ClassName #>(double <#= quantity.Unit.ParameterName #>)
        {
            return new <#= quantity.ClassName #>(<#= quantity.Unit.ParameterName #>);
        }
<#
		foreach(var su in quantity.Unit.Conversions)
		{
		#>

        /// <summary>
        /// Creates a new instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <param name="<#= su.ParameterName #>">The value in <#= su.Symbol #></param>
        public static <#= quantity.ClassName #> From<#= su.ClassName #>(double <#= su.ParameterName #>)
        {
            return From(<#= su.ParameterName #>, <#= quantity.ClassName #>Unit.<#= su.ClassName #>);
        }
<#
		} 
		#>
<#
		foreach(var op in quantity.OperatorOverloads)
		{
		#>

        public static <#= op.Result.ClassName #> operator<#= op.Operator #>(<#= op.Left.ClassName #> left, <#= op.Right.ClassName #> right)
        {
            return <#= op.Result.ClassName #>.From<#= op.Result.Unit.ClassName #>(left.<#= op.Left.Unit.ParameterName #> <#= op.Operator #> right.<#= op.Right.Unit.ParameterName #>);
        }
<#
		} 
		#>
<#
		if(quantity.Inverse != null)
		{
		#>

        public static <#= quantity.Inverse.Inverted.ClassName #> operator/(double left, <#= quantity.ClassName #> right)
        {
            return <#= quantity.Inverse.Inverted.ClassName #>.From<#= quantity.Inverse.Inverted.Unit.ClassName #>(left / right.<#= quantity.Unit.ParameterName #>);
        }
<#
		} 
		#>

        public static double operator /(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.<#= quantity.Unit.ParameterName #> / right.<#= quantity.Unit.ParameterName #>;
        }

        /// <summary>
        /// Indicates whether two <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> instances are equal.
        /// </summary>
        /// <returns>
        /// true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator ==(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.Equals(right);
        }
 
        /// <summary>
        /// Indicates whether two <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> instances are not equal.
        /// </summary>
        /// <returns>
        /// true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator !=(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return !left.Equals(right);
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> is less than another specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false. 
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator <(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.<#= quantity.Unit.ParameterName #> < right.<#= quantity.Unit.ParameterName #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> is greater than another specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false. 
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator >(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.<#= quantity.Unit.ParameterName #> > right.<#= quantity.Unit.ParameterName #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> is less than or equal to another specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator <=(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.<#= quantity.Unit.ParameterName #> <= right.<#= quantity.Unit.ParameterName #>;
        }
 
        /// <summary>
        /// Indicates whether a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> is greater than or equal to another specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static bool operator >=(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return left.<#= quantity.Unit.ParameterName #> >= right.<#= quantity.Unit.ParameterName #>;
        }
 
        /// <summary>
        /// Multiplies an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="left"/> and returns the result.
        /// </summary>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        /// <param name="left">An instance of <seealso cref="System.Double"/></param>
        /// <returns>Multiplies an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="left"/> and returns the result.</returns>
        public static <#= quantity.ClassName #> operator *(double left, <#= quantity.ClassName #> right)
        {
            return new <#= quantity.ClassName #>(left*right.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Multiplies an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="right"/> and returns the result.
        /// </summary>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        /// <param name="right">An instance of <seealso cref="System.Double"/></param>
        /// <returns>Multiplies an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="right"/> and returns the result.</returns>
        public static <#= quantity.ClassName #> operator *(<#= quantity.ClassName #> left, double right)
        {
            return new <#= quantity.ClassName #>(left.<#= quantity.Unit.ParameterName #>*right);
        }
 
        /// <summary>
        /// Divides an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="right"/> and returns the result.
        /// </summary>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        /// <param name="right">An instance of <seealso cref="System.Double"/></param>
        /// <returns>Divides an instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with <paramref name="right"/> and returns the result.</returns>
        public static <#= quantity.ClassName #> operator /(<#= quantity.ClassName #> left, double right)
        {
            return new <#= quantity.ClassName #>(left.<#= quantity.Unit.ParameterName #> / right);
        }
 
        /// <summary>
        /// Adds two specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> instances.
        /// </summary>
        /// <returns>
        /// An <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.</param>
        public static <#= quantity.ClassName #> operator +(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return new <#= quantity.ClassName #>(left.<#= quantity.Unit.ParameterName #> + right.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Subtracts an <#= quantity.ClassName #> from another <#= quantity.ClassName #> and returns the difference.
        /// </summary>
        /// <returns>
        /// An <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> that is the difference
        /// </returns>
        /// <param name="left">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> (the minuend).</param>
        /// <param name="right">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> (the subtrahend).</param>
        public static <#= quantity.ClassName #> operator -(<#= quantity.ClassName #> left, <#= quantity.ClassName #> right)
        {
            return new <#= quantity.ClassName #>(left.<#= quantity.Unit.ParameterName #> - right.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Returns an <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> whose quantity is the negated quantity of the specified instance.
        /// </summary>
        /// <returns>
        /// An <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> with the same numeric quantity as this instance, but the opposite sign.
        /// </returns>
        /// <param name="<#= quantity.ParameterName #>">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        public static <#= quantity.ClassName #> operator -(<#= quantity.ClassName #> <#= quantity.ParameterName #>)
        {
            return new <#= quantity.ClassName #>(-1*<#= quantity.ParameterName #>.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Returns the specified instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/>.
        /// </summary>
        /// <returns>
        /// Returns <paramref name="<#= quantity.ParameterName #>"/>.
        /// </returns>
        /// <param name="<#= quantity.ParameterName #>">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/></param>
        public static <#= quantity.ClassName #> operator +(<#= quantity.ClassName #> <#= quantity.ParameterName #>)
        {
            return <#= quantity.ParameterName #>;
        }

        /// <summary>
        /// Get the scalar value
        /// </summary>
        /// <param name="unit"></param>
        /// <returns>The scalar value of this in the specified unit</returns>
        public double GetValue(<#= quantity.ClassName #>Unit unit)
        {
            return unit.FromSiUnit(this.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Returns a string with the <see cref="SiValue"/> and <see cref="SiUnit"/>
        /// </summary>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns>
        public override string ToString()
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(null, this.SiUnit);
            return this.ToString(quantityFormat, (IFormatProvider)null);
        }
 
        /// <summary>
        /// Returns a string with the <see cref="SiValue"/> and <see cref="SiUnit"/>
        /// </summary>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns>
        public string ToString(IFormatProvider provider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(string.Empty, SiUnit);
            return ToString(quantityFormat, provider);
        }

        /// <summary>
        /// If an invalid format is provided the string will look like: {value: ??} {unit: ??}
        /// </summary>
        /// <param name="format">Must be a composite format ex: \"F2 <#= quantity.Unit.Symbol #>\"</param>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns>
        public string ToString(string format)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(format);
            return ToString(quantityFormat, (IFormatProvider)null);
        }

        /// <summary>
        /// If an invalid format is provided the string will look like: {value: ??} {unit: ??}
        /// </summary>
        /// <param name="format">Must be a composite format ex: \"F2 <#= quantity.Unit.Symbol #>\"</param>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns> 
        public string ToString(string format, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(format);
            return ToString(quantityFormat, formatProvider);
        }

        /// <summary>
        ///  If an invalid format is provided the string will look like: {value: ??} {unit: ??}
        /// </summary>
        /// <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="System.Double"/> are valid
        ///  ex: F2</param>
        /// <param name="symbolFormat">For formatting of the unit ex <#= quantity.Unit.Symbol #></param>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns>
        public string ToString(string valueFormat, string symbolFormat)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, symbolFormat);
            return ToString(quantityFormat, (IFormatProvider)null);
        }

        /// <summary>
        ///  If an invalid format is provided the string will look like: {value: ??} {unit: ??}
        /// </summary>
        /// <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="System.Double"/> are valid
        ///  ex: F2</param>
        /// <param name="symbolFormat">For formatting the unit ex <#= quantity.Unit.Symbol #></param>
        /// <param name="formatProvider"></param>
        /// <returns>The string representation of the <see cref="<#= quantity.ClassName #>"/></returns>
        public string ToString(string valueFormat, string symbolFormat, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, symbolFormat);
            return ToString(quantityFormat, formatProvider);
        }

        public string ToString(<#= quantity.ClassName #>Unit unit)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(null, unit);
            return ToString(quantityFormat, null);
        }

		public string ToString(<#= quantity.ClassName #>Unit unit, SymbolFormat symbolFormat)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(null, unit, symbolFormat);
            return ToString(quantityFormat, null);
        }

		public string ToString(<#= quantity.ClassName #>Unit unit, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(null, unit);
            return ToString(quantityFormat, formatProvider);
        }

		public string ToString(<#= quantity.ClassName #>Unit unit, SymbolFormat symbolFormat, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(null, unit, symbolFormat);
            return ToString(quantityFormat, formatProvider);
        }

        public string ToString(string valueFormat, <#= quantity.ClassName #>Unit unit)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, unit);
            return ToString(quantityFormat, null);
        }

		public string ToString(string valueFormat, <#= quantity.ClassName #>Unit unit, SymbolFormat symbolFormat)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, unit, symbolFormat);
            return ToString(quantityFormat, null);
        }

        public string ToString(string valueFormat, <#= quantity.ClassName #>Unit unit, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, unit);
            return ToString(quantityFormat, formatProvider);
        }

        public string ToString(string valueFormat, <#= quantity.ClassName #>Unit unit, SymbolFormat symbolFormat, IFormatProvider formatProvider)
        {
            var quantityFormat = FormatCache<<#= quantity.ClassName #>Unit>.GetOrCreate(valueFormat, unit, symbolFormat);
            return ToString(quantityFormat, formatProvider);
        }

        internal string ToString(QuantityFormat<<#= quantity.ClassName #>Unit> format, IFormatProvider formatProvider)
        {
            using (var builder = StringBuilderPool.Borrow())
            {
                builder.Append(this, format, formatProvider);
                return builder.ToString();
            }
        }

        /// <summary>
        /// Compares this instance to a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object and returns an integer that indicates whether this <see cref="quantity"/> is smaller than, equal to, or greater than the <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object.
        /// </summary>
        /// <returns>
        /// A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
        /// 
        ///                     Value
        /// 
        ///                     Description
        /// 
        ///                     A negative integer
        /// 
        ///                     This instance is smaller than <paramref name="quantity"/>.
        /// 
        ///                     Zero
        /// 
        ///                     This instance is equal to <paramref name="quantity"/>.
        /// 
        ///                     A positive integer
        /// 
        ///                     This instance is larger than <paramref name="quantity"/>.
        /// 
        /// </returns>
        /// <param name="quantity">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object to compare to this instance.</param>
        public int CompareTo(<#= quantity.ClassName #> quantity)
        {
            return this.<#= quantity.Unit.ParameterName #>.CompareTo(quantity.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Returns a quantity indicating whether this instance is equal to a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object.
        /// </summary>
        /// <returns>
        /// true if <paramref name="other"/> represents the same <#= quantity.ClassName #> as this instance; otherwise, false.
        /// </returns>
        /// <param name="other">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object to compare with this instance.</param>
        public bool Equals(<#= quantity.ClassName #> other)
        {
            return this.<#= quantity.Unit.ParameterName #>.Equals(other.<#= quantity.Unit.ParameterName #>);
        }
 
        /// <summary>
        /// Returns a quantity indicating whether this instance is equal to a specified <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object within the given tolerance.
        /// </summary>
        /// <returns>
        /// true if <paramref name="other"/> represents the same <#= quantity.ClassName #> as this instance; otherwise, false.
        /// </returns>
        /// <param name="other">An instance of <see cref="<#= Settings.Namespace #>.<#= quantity.ClassName #>"/> object to compare with this instance.</param>
        /// <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        public bool Equals(<#= quantity.ClassName #> other, <#= quantity.ClassName #> tolerance)
        {
		    Ensure.GreaterThan(tolerance.<#= quantity.Unit.ParameterName #>, 0, nameof(tolerance));
            return Math.Abs(this.<#= quantity.Unit.ParameterName #> - other.<#= quantity.Unit.ParameterName #>) < tolerance.<#= quantity.Unit.ParameterName #>;
        }
 
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }
 
            return obj is <#= quantity.ClassName #> && this.Equals((<#= quantity.ClassName #>)obj);
        }
 
        public override int GetHashCode()
        {
            return this.<#= quantity.Unit.ParameterName #>.GetHashCode();
        }
 
        /// <summary>
        /// This method is reserved and should not be used. When implementing the IXmlSerializable interface, 
        /// you should return null (Nothing in Visual Basic) from this method, and instead, 
        /// if specifying a custom schema is required, apply the <see cref="System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
        /// </summary>
        /// <returns>
        /// An <see cref="System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
        ///  <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/> 
        /// method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
        /// </returns>
        public XmlSchema GetSchema()
        {
            return null;
        }
 
        /// <summary>
        /// Generates an object from its XML representation.
        /// </summary>
        /// <param name="reader">The <see cref="System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        public void ReadXml(XmlReader reader)
        {
            // Hacking set readonly fields here, can't think of a cleaner workaround
			XmlExt.SetReadonlyField(ref this, "<#= quantity.Unit.ParameterName #>", reader, "Value");
        }
 
        /// <summary>
        /// Converts an object into its XML representation.
        /// </summary>
        /// <param name="writer">The <see cref="System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        public void WriteXml(XmlWriter writer)
        {
            XmlExt.WriteAttribute(writer, "Value", this.<#= quantity.Unit.ParameterName #>);
        }
	}
}