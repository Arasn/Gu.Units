<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TemplateFilemanager.CS.ttinclude" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #>
<# 

var fileManager = TemplateFileManager.Create(this);
fileManager.IsAutoIndentEnabled = true;
fileManager.CanOverwriteExistingFile = true;

// init handling for parameter templates
var paramTmpl = ParamTextTemplate.Create(this.Host, "QuantityValueConverter.tt");
var session = ParamTextTemplate.GetSessionObject();
var settings = Settings.Instance;
WriteLine("Read Settings found {0} units", settings.Quantities.Count);
foreach (var quantity in settings.Quantities)
{
    var fileName = quantity.Name + "Converter.generated." + Settings.Extension;
    fileManager.StartNewFile(fileName , "Gu.Units.Wpf", null, null);
	session["QuantityName"] = quantity.Name;
	string output = paramTmpl.TransformText(session);
	if (output == "ErrorGeneratingOutput")
    {
		this.WriteLine("Error transforming {0}", quantity.Name);
        throw new InvalidOperationException("output");
    }

	this.Write(output);
}

fileManager.Process();
#>