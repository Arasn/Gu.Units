<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="Gu.Units.Generator" #>
<#@ output extension=".txt" #>
<#
// Template used by EnumerableGenerator.tt
var quantities = Settings.Instance.Quantities;
#>
namespace <#= Settings.Namespace #>
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    public static partial class EnumerableUnits
    {
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #> Sum(this IEnumerable<<#= quantity.Name #>> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }

            double sum = 0;
            checked
            {
                foreach (var v in source)
                {
                    sum += v.<#= quantity.Unit.ParameterName #>;
                }
            }

            return <#= quantity.Name #>.From<#= quantity.Unit.Name #>(sum);
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #>? Sum(this IEnumerable<<#= quantity.Name #>?> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            double sum = 0;
            checked
            {
                foreach (var v in source)
                {
                    if (v != null)
                    {
                        sum += v.Value.<#= quantity.Unit.ParameterName #>;
                    }
                }
            }
            return <#= quantity.Name #>.From<#= quantity.Unit.Name #>(sum);
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #> Min(this IEnumerable<<#= quantity.Name #>> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            var value = default(<#= quantity.Name #>);
            bool hasValue = false;
            foreach (var x in source)
            {
                if (System.Double.IsNaN(x.<#= quantity.Unit.ParameterName #>))
                {
                    return x;
                }
                if (hasValue)
                {
                    if (x.<#= quantity.Unit.ParameterName #> < value.<#= quantity.Unit.ParameterName #>)
                    {
                        value = x;
                    }
                }
                else
                {
                    value = x;
                    hasValue = true;
                }
            }
            if (hasValue) return value;
            throw new ArgumentException("No elements", "source");
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #>? Min(this IEnumerable<<#= quantity.Name #>?> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            <#= quantity.Name #>? value = null;
            foreach (var x in source)
            {
                if (x == null)
                {
                    continue;
                }
                if (System.Double.IsNaN(x.Value.<#= quantity.Unit.ParameterName #>))
                {
                    return x;
                }
                if (value == null || x.Value.<#= quantity.Unit.ParameterName #> < value.Value.<#= quantity.Unit.ParameterName #>)
                {
                    value = x;
                }
            }
            return value;
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #> Max(this IEnumerable<<#= quantity.Name #>> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            <#= quantity.Name #> value = default(<#= quantity.Name #>);
            bool hasValue = false;
            foreach (<#= quantity.Name #> x in source)
            {
                if (System.Double.IsNaN(x.<#= quantity.Unit.ParameterName #>))
                {
                    return x;
                }
                if (hasValue)
                {
                    if (x.<#= quantity.Unit.ParameterName #> > value.<#= quantity.Unit.ParameterName #>)
                    {
                        value = x;
                    }
                }
                else
                {
                    value = x;
                    hasValue = true;
                }
            }
            if (hasValue) return value;
            throw new ArgumentException("No elements", "source");
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #>? Max(this IEnumerable<<#= quantity.Name #>?> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            <#= quantity.Name #>? value = null;
            foreach (var x in source)
            {
                if (x == null)
                {
                    continue;
                }
                if (System.Double.IsNaN(x.Value.<#= quantity.Unit.ParameterName #>))
                {
                    return x;
                }
                if (value == null || x.Value.<#= quantity.Unit.ParameterName #> > value.Value.<#= quantity.Unit.ParameterName #>)
                {
                    value = x;
                }
            }
            return value;
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>
        public static <#= quantity.Name #> Average(this IEnumerable<<#= quantity.Name #>> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            double sum = 0;
            long count = 0;
            checked
            {
                foreach (var v in source)
                {
                    sum += v.<#= quantity.Unit.ParameterName #>;
                    count++;
                }
            }
            if (count > 0)
            {
                return <#= quantity.Name #>.From<#= quantity.Unit.Name #>(sum / count);
            }
            throw new ArgumentException("No elements", "source");
        }

<# } #>
<#
    foreach(var quantity in quantities)
    {
		#>

        public static <#= quantity.Name #>? Average(this IEnumerable<<#= quantity.Name #>?> source)
        {
            if (source == null)
            {
                throw new ArgumentNullException("source");
            }
            double sum = 0;
            long count = 0;
            checked
            {
                foreach (var v in source)
                {
                    if (v != null)
                    {
                        sum += v.Value.<#= quantity.Unit.ParameterName #>;
                        count++;
                    }
                }
            }
            if (count > 0)
            {
                return <#= quantity.Name #>.From<#= quantity.Unit.Name #>(sum / count);
            }
            return null;
        }
<# } #>
    }
}
